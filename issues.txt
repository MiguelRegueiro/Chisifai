# Organización de Issues para el Proyecto Chisifai

## Descripción del Proyecto
Chisifai es una startup que se especializa en la entrega de tartas de queso de alta calidad. Para mantener la frescura y calidad de sus productos, es crucial monitorear la cadena de frío en tiempo real, detectar posibles incidentes (como fallos de refrigeración o manipulación brusca) y notificar inmediatamente a los encargados. Este proyecto implementa un pipeline de datos de extremo a extremo para cumplir con este objetivo.

## Componentes del Pipeline
1. **Simulador IoT (Fuente de Datos en el Borde)**
2. **Ingesta y Procesamiento (Nube)**
3. **Almacenamiento (Nube)**
4. **Acción y Visualización (Frontend y Notificaciones)**

## Issues Organizados

### Semana 1: Del Sensor al Primer Dato

**Issue 1.1: Crear el Simulador MQTT**
- **Responsable:** [Nombre del miembro con conocimientos de Python o interesado en IoT]
- **Descripción:** Escribir un script en Python que genere datos de telemetría (temperatura, fuerza_g, id_paquete, timestamp) cada 2 segundos.
- **Tareas:**
  - Investigar y utilizar la librería `paho-mqtt`.
  - Generar datos creíbles con `faker` o `random`.
  - Publicar los datos en un tópico MQTT específico (e.g., `chisifai/trackers/telemetry`).
- **Tecnologías:** Python, MQTT, `paho-mqtt`, `faker`/`random`.

**Issue 1.2: Configurar Node-RED para Ingesta**
- **Responsable:** [Nombre del miembro interesado en herramientas low-code o automatización]
- **Descripción:** Configurar un flujo en Node-RED para suscribirse al tópico MQTT, validar los datos, y llamar a la API de ingesta con reintento.
- **Tareas:**
  - Instalar y configurar Node-RED.
  - Crear un flujo que se suscriba al tópico MQTT.
  - Validar la estructura y tipos de datos del JSON recibido.
  - Configurar un nodo HTTP Request para llamar a la API de ingesta.
  - Implementar lógica de reintento y backoff exponencial.
- **Tecnologías:** Node-RED, MQTT, HTTP Request, JavaScript (para validación).

**Issue 1.3: Implementar la API de Ingesta y Base de Datos**
- **Responsable:** [Nombre del miembro con conocimientos de Python o backend]
- **Descripción:** Crear la API de ingesta con FastAPI, configurar PostgreSQL y definir el modelo de datos.
- **Tareas:**
  - Levantar una instancia de PostgreSQL (usando Docker).
  - Crear la API de ingesta con FastAPI.
  - Definir el modelo de datos para almacenar telemetría y alertas con SQLAlchemy.
  - Implementar la lógica para guardar los datos recibidos de Node-RED.
- **Tecnologías:** FastAPI, Python, PostgreSQL, SQLAlchemy, Docker.

**Issue 1.4: Integración y Pruebas Básicas**
- **Responsable:** [Nombre del miembro interesado en pruebas o integración, o rotar responsabilidad]
- **Descripción:** Conectar todos los componentes creados y probar la cadena completa.
- **Tareas:**
  - Probar la conexión del simulador al broker MQTT.
  - Verificar que Node-RED recibe los mensajes y llama a la API.
  - Confirmar que la API recibe los datos y los guarda en la base de datos.
  - Registrar cualquier error o mejora necesaria.
- **Tecnologías:** Python, MQTT, Node-RED, FastAPI, PostgreSQL, Docker.

### Semana 2: Arquitectura con Propósito

**Issue 2.1: Crear Diagrama de Arquitectura**
- **Responsable:** [Nombre del miembro interesado en diseño o documentación]
- **Descripción:** Crear un diagrama de bloques claro de la arquitectura del sistema.
- **Tareas:**
  - Incluir todos los componentes principales (Edge, Broker MQTT, Node-RED, API, BD, Frontend, Notificaciones).
  - Etiquetar los componentes con rasgos NIST de Cloud Computing.
  - Exportar el diagrama como PNG o PDF.
- **Herramientas:** Diagrams.net, Miro, Lucidchart, Google Slides.

**Issue 2.2: Documentar Decisiones Arquitectónicas**
- **Responsable:** [Nombre del miembro interesado en análisis o documentación, o rotar]
- **Descripción:** Justificar cada tecnología elegida, su propósito, ventajas y trade-offs.
- **Tareas:**
  - Crear fichas de decisión para cada componente principal (Edge, Broker, Flujo, Almacenamiento, Acción/Visualización).
  - Responder preguntas sobre propósito, tecnología, justificación cloud y trade-offs.
- **Formato:** Documento de texto o diapositivas.

### Semana 3: De Dato a Decisión

**Issue 3.1: Implementar Lógica de Detección de Incidentes**
- **Responsable:** [Nombre del miembro con habilidades de lógica o scripting, puede ser el mismo de Node-RED]
- **Descripción:** Modificar el flujo de Node-RED para implementar la regla de "N eventos sostenidos".
- **Tareas:**
  - Implementar la regla: alerta si `temperatura > 6°C` O `fuerza_g > 2.5G` durante N eventos consecutivos.
  - Gestión del estado de cada paquete (usando variables de contexto o caché).
- **Tecnologías:** Node-RED, JavaScript.

**Issue 3.2: Evaluar la Lógica de Detección**
- **Responsable:** [Nombre del miembro con habilidades analíticas o interesado en ML/Data]
- **Descripción:** Crear un script para evaluar la efectividad de la lógica de detección.
- **Tareas:**
  - Leer el archivo `analytics/labels.csv` (simulado o proporcionado).
  - Simular la lógica de detección en Python.
  - Comparar alertas generadas con etiquetas reales.
  - Calcular Precisión, Recall y F1-Score.
- **Tecnologías:** Python, `pandas`, `scikit-learn`.

**Issue 3.3: Justificar la Métrica de Negocio**
- **Responsable:** [Nombre del miembro interesado en negocio o toma de decisiones]
- **Descripción:** Decidir qué métrica (Precisión, Recall, F1) es más relevante para Chisifai.
- **Tareas:**
  - Analizar el impacto de falsos positivos y negativos en la empresa.
  - Justificar la elección de métrica.
- **Formato:** Documento de texto.

### Semana 4: KPIs que Importan

**Issue 4.1: Definir e Implementar KPIs**
- **Responsable:** [Nombre del miembro interesado en backend o análisis]
- **Descripción:** Calcular y definir los KPIs de negocio.
- **Tareas:**
  - KPI 1: % de Envíos en SLA.
  - KPI 2: Tiempo Medio de Detección (MTTD).
  - KPI 3: % de Falsos Positivos (simular tabla de validación).
  - Escribir consultas SQL para calcularlos.
- **Tecnologías:** SQL, PostgreSQL.

**Issue 4.2: Desarrollar el Frontend (Dashboard con React)**
- **Responsable:** [Nombre del miembro experto en React o interesado en frontend]
- **Descripción:** Crear un dashboard en React para visualizar datos y KPIs.
- **Tareas:**
  - Inicializar proyecto React.
  - Conectar con la API de consulta (FastAPI).
  - Visualizar KPIs, datos en tiempo real (gráficos y mapa).
  - Mostrar alertas recibidas.
- **Tecnologías:** React.js, JavaScript/TypeScript, Chart.js/D3.js, Leaflet, API (FastAPI).

**Issue 4.3: Configurar Notificaciones**
- **Responsable:** [Nombre del miembro interesado en integraciones o backend]
- **Descripción:** Programar alertas que se envíen a una plataforma como Discord o Slack.
- **Tareas:**
  - Configurar webhook de Discord/Slack.
  - Programar en Node-RED o en la API la llamada al webhook cuando se detecta una alerta.
- **Tecnologías:** Webhooks, Node-RED, FastAPI, Discord/Slack.

### Semana 5: Seguridad por Diseño + Boss Fight

**Issue 5.1: Aplicar Seguridad CIA**
- **Responsable:** [Nombre del miembro interesado en seguridad o backend]
- **Descripción:** Implementar medidas de seguridad según la tríada CIA.
- **Tareas:**
  - Mover credenciales a `.env` y usar `python-dotenv`.
  - Validar tipos y rangos de datos en la API (Pydantic).
  - Asegurar la lógica de reintento y backoff.
- **Tecnologías:** Python, FastAPI, `python-dotenv`, Pydantic.

**Issue 5.2: Preparación y Ejecución de la "Boss Fight"**
- **Responsable:** [Nombre del miembro interesado en pruebas o liderazgo]
- **Descripción:** Probar la resiliencia del sistema ante una interrupción de la base de datos.
- **Tareas:**
  - Probar que el sistema maneje la interrupción sin perder datos.
  - Verificar la acumulación y procesamiento tras la recuperación.
  - Registrar logs o evidencia del proceso.
- **Tecnologías:** Node-RED, FastAPI, PostgreSQL, Docker.

**Issue 5.3: Documentación Final e Informe**
- **Responsable:** [Nombre del miembro con habilidades de redacción o liderazgo]
- **Descripción:** Crear el informe final del proyecto y preparar el video de demostración.
- **Tareas:**
  - Escribir el informe (máx. 4 págs.) cubriendo arquitectura, ingesta, detección, KPIs, seguridad, boss fight.
  - Grabar y subir el video de demostración.
- **Formato:** PDF, Video (enlace en archivo).
