{"ast":null,"code":"// apiService.js - API service module to connect with FastAPI backend\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';// Fetch telemetry data\nexport const fetchTelemetryData=async()=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/telemetry\"));const data=await response.json();return data;}catch(error){console.error('Error fetching telemetry data:',error);return[];}};// Fetch KPIs\nexport const fetchKPIs=async()=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/kpis\"));const data=await response.json();return data;}catch(error){console.error('Error fetching KPIs:',error);return{};}};// Fetch alerts\nexport const fetchAlerts=async()=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/alerts\"));const data=await response.json();return data;}catch(error){console.error('Error fetching alerts:',error);return[];}};// Fetch location data\nexport const fetchLocationData=async()=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/location\"));const data=await response.json();return data;}catch(error){console.error('Error fetching location data:',error);return[];}};// Fetch temperature data\nexport const fetchTemperatureData=async()=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/temperature\"));const data=await response.json();return data;}catch(error){console.error('Error fetching temperature data:',error);return[];}};// Fetch G-force data\nexport const fetchGForceData=async()=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/gforce\"));const data=await response.json();return data;}catch(error){console.error('Error fetching G-force data:',error);return[];}};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","fetchTelemetryData","response","fetch","concat","data","json","error","console","fetchKPIs","fetchAlerts","fetchLocationData","fetchTemperatureData","fetchGForceData"],"sources":["/home/regueiro/Chisifai/frontend-chisifai/src/services/apiService.js"],"sourcesContent":["// apiService.js - API service module to connect with FastAPI backend\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Fetch telemetry data\nexport const fetchTelemetryData = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/telemetry`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching telemetry data:', error);\n    return [];\n  }\n};\n\n// Fetch KPIs\nexport const fetchKPIs = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/kpis`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching KPIs:', error);\n    return {};\n  }\n};\n\n// Fetch alerts\nexport const fetchAlerts = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/alerts`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching alerts:', error);\n    return [];\n  }\n};\n\n// Fetch location data\nexport const fetchLocationData = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/location`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching location data:', error);\n    return [];\n  }\n};\n\n// Fetch temperature data\nexport const fetchTemperatureData = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/temperature`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching temperature data:', error);\n    return [];\n  }\n};\n\n// Fetch G-force data\nexport const fetchGForceData = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/gforce`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching G-force data:', error);\n    return [];\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}