{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{fetchTelemetryData,fetchKPIs,fetchAlerts,fetchLocationData}from'../services/apiService';import{jsx as _jsx}from\"react/jsx-runtime\";const DataContext=/*#__PURE__*/createContext();export const DataProvider=_ref=>{let{children}=_ref;const[telemetryData,setTelemetryData]=useState([]);const[kpis,setKpis]=useState({});const[alerts,setAlerts]=useState([]);const[locationData,setLocationData]=useState([]);const[loading,setLoading]=useState(true);// Fetch real data from API\nconst fetchData=async()=>{setLoading(true);try{// Fetch all data concurrently\nconst[telemetry,kpis,alerts,locations]=await Promise.all([fetchTelemetryData(),fetchKPIs(),fetchAlerts(),fetchLocationData()]);// Only update state if data is valid\nif(telemetry!==null)setTelemetryData(telemetry);if(kpis!==null)setKpis(kpis);if(alerts!==null)setAlerts(alerts);if(locations!==null)setLocationData(locations);}catch(error){console.error('Error fetching data:',error);// Keep existing data if there's an error\n}finally{setLoading(false);}};// Initialize data and set up polling\nuseEffect(()=>{// Initial data load\nfetchData();// Set up polling to update data every 5 seconds\nconst interval=setInterval(()=>{fetchData();},5000);// Clean up interval on component unmount\nreturn()=>clearInterval(interval);},[]);return/*#__PURE__*/_jsx(DataContext.Provider,{value:{telemetryData,kpis,alerts,locationData,loading},children:children});};export const useData=()=>{const context=useContext(DataContext);if(!context){throw new Error('useData must be used within a DataProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","fetchTelemetryData","fetchKPIs","fetchAlerts","fetchLocationData","jsx","_jsx","DataContext","DataProvider","_ref","children","telemetryData","setTelemetryData","kpis","setKpis","alerts","setAlerts","locationData","setLocationData","loading","setLoading","fetchData","telemetry","locations","Promise","all","error","console","interval","setInterval","clearInterval","Provider","value","useData","context","Error"],"sources":["/home/regueiro/Chisifai/frontend-chisifai/src/contexts/DataContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { \n  fetchTelemetryData, \n  fetchKPIs, \n  fetchAlerts, \n  fetchLocationData \n} from '../services/apiService';\n\nconst DataContext = createContext();\n\nexport const DataProvider = ({ children }) => {\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [kpis, setKpis] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const [locationData, setLocationData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n\n\n  // Fetch real data from API\n  const fetchData = async () => {\n    setLoading(true);\n    \n    try {\n      // Fetch all data concurrently\n      const [telemetry, kpis, alerts, locations] = await Promise.all([\n        fetchTelemetryData(),\n        fetchKPIs(),\n        fetchAlerts(),\n        fetchLocationData()\n      ]);\n      \n      // Only update state if data is valid\n      if (telemetry !== null) setTelemetryData(telemetry);\n      if (kpis !== null) setKpis(kpis);\n      if (alerts !== null) setAlerts(alerts);\n      if (locations !== null) setLocationData(locations);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      // Keep existing data if there's an error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initialize data and set up polling\n  useEffect(() => {\n    // Initial data load\n    fetchData();\n    \n    // Set up polling to update data every 5 seconds\n    const interval = setInterval(() => {\n      fetchData();\n    }, 5000);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <DataContext.Provider value={{\n      telemetryData,\n      kpis,\n      alerts,\n      locationData,\n      loading\n    }}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n\nexport const useData = () => {\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useData must be used within a DataProvider');\n  }\n  return context;\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC7E,OACEC,kBAAkB,CAClBC,SAAS,CACTC,WAAW,CACXC,iBAAiB,KACZ,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEhC,KAAM,CAAAC,WAAW,cAAGV,aAAa,CAAC,CAAC,CAEnC,MAAO,MAAM,CAAAW,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,aAAa,CAAEC,gBAAgB,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACa,IAAI,CAAEC,OAAO,CAAC,CAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC,CACpC,KAAM,CAACe,MAAM,CAAEC,SAAS,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CACxC,KAAM,CAACiB,YAAY,CAAEC,eAAe,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACmB,OAAO,CAAEC,UAAU,CAAC,CAAGpB,QAAQ,CAAC,IAAI,CAAC,CAI5C;AACA,KAAM,CAAAqB,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5BD,UAAU,CAAC,IAAI,CAAC,CAEhB,GAAI,CACF;AACA,KAAM,CAACE,SAAS,CAAET,IAAI,CAAEE,MAAM,CAAEQ,SAAS,CAAC,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAAC,CAC7DxB,kBAAkB,CAAC,CAAC,CACpBC,SAAS,CAAC,CAAC,CACXC,WAAW,CAAC,CAAC,CACbC,iBAAiB,CAAC,CAAC,CACpB,CAAC,CAEF;AACA,GAAIkB,SAAS,GAAK,IAAI,CAAEV,gBAAgB,CAACU,SAAS,CAAC,CACnD,GAAIT,IAAI,GAAK,IAAI,CAAEC,OAAO,CAACD,IAAI,CAAC,CAChC,GAAIE,MAAM,GAAK,IAAI,CAAEC,SAAS,CAACD,MAAM,CAAC,CACtC,GAAIQ,SAAS,GAAK,IAAI,CAAEL,eAAe,CAACK,SAAS,CAAC,CACpD,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C;AACF,CAAC,OAAS,CACRN,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED;AACArB,SAAS,CAAC,IAAM,CACd;AACAsB,SAAS,CAAC,CAAC,CAEX;AACA,KAAM,CAAAO,QAAQ,CAAGC,WAAW,CAAC,IAAM,CACjCR,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,IAAI,CAAC,CAER;AACA,MAAO,IAAMS,aAAa,CAACF,QAAQ,CAAC,CACtC,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEtB,IAAA,CAACC,WAAW,CAACwB,QAAQ,EAACC,KAAK,CAAE,CAC3BrB,aAAa,CACbE,IAAI,CACJE,MAAM,CACNE,YAAY,CACZE,OACF,CAAE,CAAAT,QAAA,CACCA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAuB,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAGpC,UAAU,CAACS,WAAW,CAAC,CACvC,GAAI,CAAC2B,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,4CAA4C,CAAC,CAC/D,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}