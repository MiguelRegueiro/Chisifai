{"ast":null,"code":"var _jsxFileName = \"/home/regueiro/Chisifai/frontend-chisifai/src/contexts/DataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext();\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [kpis, setKpis] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const [locationData, setLocationData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Generate mock data to simulate real-time updates\n  const generateMockData = () => {\n    // Generate mock telemetry data\n    const mockTelemetry = [];\n    for (let i = 0; i < 5; i++) {\n      mockTelemetry.push({\n        id: i + 1,\n        packageId: `PKG-${String(i + 1).padStart(3, '0')}`,\n        temperature: parseFloat((2 + Math.random() * 6).toFixed(2)),\n        gForce: parseFloat((0.2 + Math.random() * 2.8).toFixed(2)),\n        latitude: 40.4168 + (Math.random() - 0.5) * 0.5,\n        longitude: -3.7038 + (Math.random() - 0.5) * 0.5,\n        timestamp: new Date().toISOString()\n      });\n    }\n    setTelemetryData(mockTelemetry);\n\n    // Generate mock KPIs\n    setKpis({\n      slaPercentage: parseFloat((90 + Math.random() * 8).toFixed(1)),\n      mttDetection: Math.floor(10 + Math.random() * 60),\n      falsePositiveRate: parseFloat((5 + Math.random() * 8).toFixed(1))\n    });\n\n    // Generate mock alerts\n    const mockAlerts = [];\n    if (Math.random() > 0.7) {\n      // 30% chance of generating an alert\n      mockAlerts.push({\n        id: Date.now(),\n        packageId: `PKG-${Math.floor(Math.random() * 10) + 1}`,\n        type: Math.random() > 0.5 ? 'Temperatura Excedida' : 'Posible Impacto',\n        message: Math.random() > 0.5 ? 'La temperatura superó los límites establecidos' : 'Se detectó una fuerza G inusual',\n        timestamp: new Date().toLocaleTimeString(),\n        severity: Math.random() > 0.5 ? 'high' : 'medium'\n      });\n    }\n    setAlerts(prev => [...mockAlerts, ...prev.slice(0, 4)]); // Keep only last 5 alerts\n\n    // Generate mock location data\n    const mockLocations = mockTelemetry.map(item => ({\n      id: item.id,\n      lat: item.latitude,\n      lng: item.longitude,\n      name: item.packageId,\n      temp: item.temperature,\n      gForce: item.gForce\n    }));\n    setLocationData(mockLocations);\n    setLoading(false);\n  };\n\n  // Initialize data and set up polling\n  useEffect(() => {\n    // Initial data load\n    generateMockData();\n\n    // Set up polling to update data every 5 seconds\n    const interval = setInterval(() => {\n      generateMockData();\n    }, 5000);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      telemetryData,\n      kpis,\n      alerts,\n      locationData,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(DataProvider, \"2Set7DXlPs8FS0eBPZeDHY0RtgQ=\");\n_c = DataProvider;\nexport const useData = () => {\n  _s2();\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useData must be used within a DataProvider');\n  }\n  return context;\n};\n_s2(useData, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","DataContext","DataProvider","children","_s","telemetryData","setTelemetryData","kpis","setKpis","alerts","setAlerts","locationData","setLocationData","loading","setLoading","generateMockData","mockTelemetry","i","push","id","packageId","String","padStart","temperature","parseFloat","Math","random","toFixed","gForce","latitude","longitude","timestamp","Date","toISOString","slaPercentage","mttDetection","floor","falsePositiveRate","mockAlerts","now","type","message","toLocaleTimeString","severity","prev","slice","mockLocations","map","item","lat","lng","name","temp","interval","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useData","_s2","context","Error","$RefreshReg$"],"sources":["/home/regueiro/Chisifai/frontend-chisifai/src/contexts/DataContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\nconst DataContext = createContext();\n\nexport const DataProvider = ({ children }) => {\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [kpis, setKpis] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const [locationData, setLocationData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n\n\n  // Generate mock data to simulate real-time updates\n  const generateMockData = () => {\n    // Generate mock telemetry data\n    const mockTelemetry = [];\n    for (let i = 0; i < 5; i++) {\n      mockTelemetry.push({\n        id: i + 1,\n        packageId: `PKG-${String(i + 1).padStart(3, '0')}`,\n        temperature: parseFloat((2 + Math.random() * 6).toFixed(2)),\n        gForce: parseFloat((0.2 + Math.random() * 2.8).toFixed(2)),\n        latitude: 40.4168 + (Math.random() - 0.5) * 0.5,\n        longitude: -3.7038 + (Math.random() - 0.5) * 0.5,\n        timestamp: new Date().toISOString()\n      });\n    }\n    setTelemetryData(mockTelemetry);\n\n    // Generate mock KPIs\n    setKpis({\n      slaPercentage: parseFloat((90 + Math.random() * 8).toFixed(1)),\n      mttDetection: Math.floor(10 + Math.random() * 60),\n      falsePositiveRate: parseFloat((5 + Math.random() * 8).toFixed(1))\n    });\n\n    // Generate mock alerts\n    const mockAlerts = [];\n    if (Math.random() > 0.7) { // 30% chance of generating an alert\n      mockAlerts.push({\n        id: Date.now(),\n        packageId: `PKG-${Math.floor(Math.random() * 10) + 1}`,\n        type: Math.random() > 0.5 ? 'Temperatura Excedida' : 'Posible Impacto',\n        message: Math.random() > 0.5 \n          ? 'La temperatura superó los límites establecidos' \n          : 'Se detectó una fuerza G inusual',\n        timestamp: new Date().toLocaleTimeString(),\n        severity: Math.random() > 0.5 ? 'high' : 'medium'\n      });\n    }\n    setAlerts(prev => [...mockAlerts, ...prev.slice(0, 4)]); // Keep only last 5 alerts\n\n    // Generate mock location data\n    const mockLocations = mockTelemetry.map(item => ({\n      id: item.id,\n      lat: item.latitude,\n      lng: item.longitude,\n      name: item.packageId,\n      temp: item.temperature,\n      gForce: item.gForce\n    }));\n    setLocationData(mockLocations);\n\n    setLoading(false);\n  };\n\n  // Initialize data and set up polling\n  useEffect(() => {\n    // Initial data load\n    generateMockData();\n    \n    // Set up polling to update data every 5 seconds\n    const interval = setInterval(() => {\n      generateMockData();\n    }, 5000);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <DataContext.Provider value={{\n      telemetryData,\n      kpis,\n      alerts,\n      locationData,\n      loading\n    }}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n\nexport const useData = () => {\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useData must be used within a DataProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}