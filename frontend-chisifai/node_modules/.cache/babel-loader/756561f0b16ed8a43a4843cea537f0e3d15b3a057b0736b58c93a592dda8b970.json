{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const DataContext=/*#__PURE__*/createContext();export const DataProvider=_ref=>{let{children}=_ref;const[telemetryData,setTelemetryData]=useState([]);const[kpis,setKpis]=useState({});const[alerts,setAlerts]=useState([]);const[locationData,setLocationData]=useState([]);const[loading,setLoading]=useState(true);// Generate mock data to simulate real-time updates\nconst generateMockData=()=>{// Generate mock telemetry data\nconst mockTelemetry=[];for(let i=0;i<5;i++){mockTelemetry.push({id:i+1,packageId:\"PKG-\".concat(String(i+1).padStart(3,'0')),temperature:parseFloat((2+Math.random()*6).toFixed(2)),gForce:parseFloat((0.2+Math.random()*2.8).toFixed(2)),latitude:40.4168+(Math.random()-0.5)*0.5,longitude:-3.7038+(Math.random()-0.5)*0.5,timestamp:new Date().toISOString()});}setTelemetryData(mockTelemetry);// Generate mock KPIs\nsetKpis({slaPercentage:parseFloat((90+Math.random()*8).toFixed(1)),mttDetection:Math.floor(10+Math.random()*60),falsePositiveRate:parseFloat((5+Math.random()*8).toFixed(1))});// Generate mock alerts\nconst mockAlerts=[];if(Math.random()>0.7){// 30% chance of generating an alert\nmockAlerts.push({id:Date.now(),packageId:\"PKG-\".concat(Math.floor(Math.random()*10)+1),type:Math.random()>0.5?'Temperatura Excedida':'Posible Impacto',message:Math.random()>0.5?'La temperatura superó los límites establecidos':'Se detectó una fuerza G inusual',timestamp:new Date().toLocaleTimeString(),severity:Math.random()>0.5?'high':'medium'});}setAlerts(prev=>[...mockAlerts,...prev.slice(0,4)]);// Keep only last 5 alerts\n// Generate mock location data\nconst mockLocations=mockTelemetry.map(item=>({id:item.id,lat:item.latitude,lng:item.longitude,name:item.packageId,temp:item.temperature,gForce:item.gForce}));setLocationData(mockLocations);setLoading(false);};// Initialize data and set up polling\nuseEffect(()=>{// Initial data load\ngenerateMockData();// Set up polling to update data every 5 seconds\nconst interval=setInterval(()=>{generateMockData();},5000);// Clean up interval on component unmount\nreturn()=>clearInterval(interval);},[]);return/*#__PURE__*/_jsx(DataContext.Provider,{value:{telemetryData,kpis,alerts,locationData,loading},children:children});};export const useData=()=>{const context=useContext(DataContext);if(!context){throw new Error('useData must be used within a DataProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsx","_jsx","DataContext","DataProvider","_ref","children","telemetryData","setTelemetryData","kpis","setKpis","alerts","setAlerts","locationData","setLocationData","loading","setLoading","generateMockData","mockTelemetry","i","push","id","packageId","concat","String","padStart","temperature","parseFloat","Math","random","toFixed","gForce","latitude","longitude","timestamp","Date","toISOString","slaPercentage","mttDetection","floor","falsePositiveRate","mockAlerts","now","type","message","toLocaleTimeString","severity","prev","slice","mockLocations","map","item","lat","lng","name","temp","interval","setInterval","clearInterval","Provider","value","useData","context","Error"],"sources":["/home/regueiro/Chisifai/frontend-chisifai/src/contexts/DataContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\nconst DataContext = createContext();\n\nexport const DataProvider = ({ children }) => {\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [kpis, setKpis] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const [locationData, setLocationData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n\n\n  // Generate mock data to simulate real-time updates\n  const generateMockData = () => {\n    // Generate mock telemetry data\n    const mockTelemetry = [];\n    for (let i = 0; i < 5; i++) {\n      mockTelemetry.push({\n        id: i + 1,\n        packageId: `PKG-${String(i + 1).padStart(3, '0')}`,\n        temperature: parseFloat((2 + Math.random() * 6).toFixed(2)),\n        gForce: parseFloat((0.2 + Math.random() * 2.8).toFixed(2)),\n        latitude: 40.4168 + (Math.random() - 0.5) * 0.5,\n        longitude: -3.7038 + (Math.random() - 0.5) * 0.5,\n        timestamp: new Date().toISOString()\n      });\n    }\n    setTelemetryData(mockTelemetry);\n\n    // Generate mock KPIs\n    setKpis({\n      slaPercentage: parseFloat((90 + Math.random() * 8).toFixed(1)),\n      mttDetection: Math.floor(10 + Math.random() * 60),\n      falsePositiveRate: parseFloat((5 + Math.random() * 8).toFixed(1))\n    });\n\n    // Generate mock alerts\n    const mockAlerts = [];\n    if (Math.random() > 0.7) { // 30% chance of generating an alert\n      mockAlerts.push({\n        id: Date.now(),\n        packageId: `PKG-${Math.floor(Math.random() * 10) + 1}`,\n        type: Math.random() > 0.5 ? 'Temperatura Excedida' : 'Posible Impacto',\n        message: Math.random() > 0.5 \n          ? 'La temperatura superó los límites establecidos' \n          : 'Se detectó una fuerza G inusual',\n        timestamp: new Date().toLocaleTimeString(),\n        severity: Math.random() > 0.5 ? 'high' : 'medium'\n      });\n    }\n    setAlerts(prev => [...mockAlerts, ...prev.slice(0, 4)]); // Keep only last 5 alerts\n\n    // Generate mock location data\n    const mockLocations = mockTelemetry.map(item => ({\n      id: item.id,\n      lat: item.latitude,\n      lng: item.longitude,\n      name: item.packageId,\n      temp: item.temperature,\n      gForce: item.gForce\n    }));\n    setLocationData(mockLocations);\n\n    setLoading(false);\n  };\n\n  // Initialize data and set up polling\n  useEffect(() => {\n    // Initial data load\n    generateMockData();\n    \n    // Set up polling to update data every 5 seconds\n    const interval = setInterval(() => {\n      generateMockData();\n    }, 5000);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <DataContext.Provider value={{\n      telemetryData,\n      kpis,\n      alerts,\n      locationData,\n      loading\n    }}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n\nexport const useData = () => {\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useData must be used within a DataProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}