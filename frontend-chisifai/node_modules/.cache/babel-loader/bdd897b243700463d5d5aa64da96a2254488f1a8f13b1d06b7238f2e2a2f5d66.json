{"ast":null,"code":"var _jsxFileName = \"/home/regueiro/Chisifai/frontend-chisifai/src/contexts/DataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { fetchTelemetryData, fetchKPIs, fetchAlerts, fetchLocationData } from '../services/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext();\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [kpis, setKpis] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const [locationData, setLocationData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch real data from API\n  const fetchData = async () => {\n    setLoading(true);\n    try {\n      // Fetch all data concurrently\n      const [telemetry, kpis, alerts, locations] = await Promise.all([fetchTelemetryData(), fetchKPIs(), fetchAlerts(), fetchLocationData()]);\n\n      // Only update state if data is valid\n      if (telemetry !== null) setTelemetryData(telemetry);\n      if (kpis !== null) setKpis(kpis);\n      if (alerts !== null) setAlerts(alerts);\n      if (locations !== null) setLocationData(locations);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      // Keep existing data if there's an error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initialize data and set up polling\n  useEffect(() => {\n    // Initial data load\n    fetchData();\n\n    // Set up polling to update data every 5 seconds\n    const interval = setInterval(() => {\n      fetchData();\n    }, 5000);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      telemetryData,\n      kpis,\n      alerts,\n      locationData,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(DataProvider, \"2Set7DXlPs8FS0eBPZeDHY0RtgQ=\");\n_c = DataProvider;\nexport const useData = () => {\n  _s2();\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useData must be used within a DataProvider');\n  }\n  return context;\n};\n_s2(useData, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","fetchTelemetryData","fetchKPIs","fetchAlerts","fetchLocationData","jsxDEV","_jsxDEV","DataContext","DataProvider","children","_s","telemetryData","setTelemetryData","kpis","setKpis","alerts","setAlerts","locationData","setLocationData","loading","setLoading","fetchData","telemetry","locations","Promise","all","error","console","interval","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useData","_s2","context","Error","$RefreshReg$"],"sources":["/home/regueiro/Chisifai/frontend-chisifai/src/contexts/DataContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { \n  fetchTelemetryData, \n  fetchKPIs, \n  fetchAlerts, \n  fetchLocationData \n} from '../services/apiService';\n\nconst DataContext = createContext();\n\nexport const DataProvider = ({ children }) => {\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [kpis, setKpis] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const [locationData, setLocationData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n\n\n  // Fetch real data from API\n  const fetchData = async () => {\n    setLoading(true);\n    \n    try {\n      // Fetch all data concurrently\n      const [telemetry, kpis, alerts, locations] = await Promise.all([\n        fetchTelemetryData(),\n        fetchKPIs(),\n        fetchAlerts(),\n        fetchLocationData()\n      ]);\n      \n      // Only update state if data is valid\n      if (telemetry !== null) setTelemetryData(telemetry);\n      if (kpis !== null) setKpis(kpis);\n      if (alerts !== null) setAlerts(alerts);\n      if (locations !== null) setLocationData(locations);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      // Keep existing data if there's an error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initialize data and set up polling\n  useEffect(() => {\n    // Initial data load\n    fetchData();\n    \n    // Set up polling to update data every 5 seconds\n    const interval = setInterval(() => {\n      fetchData();\n    }, 5000);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <DataContext.Provider value={{\n      telemetryData,\n      kpis,\n      alerts,\n      locationData,\n      loading\n    }}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n\nexport const useData = () => {\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useData must be used within a DataProvider');\n  }\n  return context;\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,SACEC,kBAAkB,EAClBC,SAAS,EACTC,WAAW,EACXC,iBAAiB,QACZ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,WAAW,gBAAGV,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMW,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;;EAI5C;EACA,MAAMqB,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5BD,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACF;MACA,MAAM,CAACE,SAAS,EAAET,IAAI,EAAEE,MAAM,EAAEQ,SAAS,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC7DxB,kBAAkB,CAAC,CAAC,EACpBC,SAAS,CAAC,CAAC,EACXC,WAAW,CAAC,CAAC,EACbC,iBAAiB,CAAC,CAAC,CACpB,CAAC;;MAEF;MACA,IAAIkB,SAAS,KAAK,IAAI,EAAEV,gBAAgB,CAACU,SAAS,CAAC;MACnD,IAAIT,IAAI,KAAK,IAAI,EAAEC,OAAO,CAACD,IAAI,CAAC;MAChC,IAAIE,MAAM,KAAK,IAAI,EAAEC,SAAS,CAACD,MAAM,CAAC;MACtC,IAAIQ,SAAS,KAAK,IAAI,EAAEL,eAAe,CAACK,SAAS,CAAC;IACpD,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C;IACF,CAAC,SAAS;MACRN,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACArB,SAAS,CAAC,MAAM;IACd;IACAsB,SAAS,CAAC,CAAC;;IAEX;IACA,MAAMO,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCR,SAAS,CAAC,CAAC;IACb,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAMS,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEtB,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAC3BrB,aAAa;MACbE,IAAI;MACJE,MAAM;MACNE,YAAY;MACZE;IACF,CAAE;IAAAV,QAAA,EACCA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC1B,EAAA,CA5DWF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AA8DzB,OAAO,MAAM8B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAG1C,UAAU,CAACS,WAAW,CAAC;EACvC,IAAI,CAACiC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}