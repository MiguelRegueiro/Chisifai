{"ast":null,"code":"var _jsxFileName = \"/home/regueiro/Chisifai/frontend-chisifai/src/components/GForceChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { useData } from '../contexts/DataContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst GForceChart = () => {\n  _s();\n  const {\n    telemetryData,\n    loading\n  } = useData();\n  const chartRef = useRef(null);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Fuerza G',\n      data: [],\n      borderColor: 'rgb(53, 162, 235)',\n      backgroundColor: 'rgba(53, 162, 235, 0.5)',\n      tension: 0.1\n    }]\n  });\n\n  // Update chart data when telemetry data changes\n  useEffect(() => {\n    if (telemetryData && telemetryData.length > 0 && !loading) {\n      // Use the most recent telemetry reading\n      const latestReadings = [...telemetryData].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n      if (latestReadings.length > 0) {\n        const latestReading = latestReadings[0];\n\n        // Use the real timestamp from the data\n        const timestamp = new Date(latestReading.timestamp).toLocaleTimeString();\n        const newGForce = latestReading.gForce;\n\n        // Update chart data\n        setChartData(prevData => {\n          // Only add new data point if it's different from the last one to prevent duplicates\n          if (prevData.labels.length > 0 && prevData.labels[prevData.labels.length - 1] === timestamp) {\n            return prevData; // Return previous data if timestamp is the same (avoid duplicate points)\n          }\n          const newLabels = [...prevData.labels.slice(-9), timestamp]; // Keep last 10 points\n          const newData = [...prevData.datasets[0].data.slice(-9), newGForce];\n          return {\n            labels: newLabels,\n            datasets: [{\n              ...prevData.datasets[0],\n              data: newData\n            }]\n          };\n        });\n      }\n    }\n  }, [telemetryData, loading]);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Fuerza G en Tiempo Real'\n      }\n    },\n    scales: {\n      y: {\n        title: {\n          display: true,\n          text: 'Fuerza G'\n        },\n        min: 0,\n        max: 4\n      }\n    },\n    animation: {\n      duration: 300 // Animation duration in milliseconds\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"mb-0\",\n        children: \"Seguimiento de Fuerza G\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        ref: chartRef,\n        options: options,\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(GForceChart, \"yo45ZZG0KHVGgIjoQea6/4YZurc=\", false, function () {\n  return [useData];\n});\n_c = GForceChart;\nexport default GForceChart;\nvar _c;\n$RefreshReg$(_c, \"GForceChart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Card","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","useData","jsxDEV","_jsxDEV","register","GForceChart","_s","telemetryData","loading","chartRef","chartData","setChartData","labels","datasets","label","data","borderColor","backgroundColor","tension","length","latestReadings","sort","a","b","Date","timestamp","latestReading","toLocaleTimeString","newGForce","gForce","prevData","newLabels","slice","newData","options","responsive","plugins","legend","position","title","display","text","scales","y","min","max","animation","duration","children","Header","className","fileName","_jsxFileName","lineNumber","columnNumber","Body","ref","_c","$RefreshReg$"],"sources":["/home/regueiro/Chisifai/frontend-chisifai/src/components/GForceChart.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { useData } from '../contexts/DataContext';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst GForceChart = () => {\n  const { telemetryData, loading } = useData();\n  const chartRef = useRef(null);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [\n      {\n        label: 'Fuerza G',\n        data: [],\n        borderColor: 'rgb(53, 162, 235)',\n        backgroundColor: 'rgba(53, 162, 235, 0.5)',\n        tension: 0.1,\n      },\n    ],\n  });\n\n  // Update chart data when telemetry data changes\n  useEffect(() => {\n    if (telemetryData && telemetryData.length > 0 && !loading) {\n      // Use the most recent telemetry reading\n      const latestReadings = [...telemetryData].sort((a, b) => \n        new Date(b.timestamp) - new Date(a.timestamp)\n      );\n      \n      if (latestReadings.length > 0) {\n        const latestReading = latestReadings[0];\n        \n        // Use the real timestamp from the data\n        const timestamp = new Date(latestReading.timestamp).toLocaleTimeString();\n        const newGForce = latestReading.gForce;\n        \n        // Update chart data\n        setChartData(prevData => {\n          // Only add new data point if it's different from the last one to prevent duplicates\n          if (prevData.labels.length > 0 && prevData.labels[prevData.labels.length - 1] === timestamp) {\n            return prevData; // Return previous data if timestamp is the same (avoid duplicate points)\n          }\n          \n          const newLabels = [...prevData.labels.slice(-9), timestamp]; // Keep last 10 points\n          const newData = [...prevData.datasets[0].data.slice(-9), newGForce];\n          \n          return {\n            labels: newLabels,\n            datasets: [\n              {\n                ...prevData.datasets[0],\n                data: newData,\n              }\n            ]\n          };\n        });\n      }\n    }\n  }, [telemetryData, loading]);\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Fuerza G en Tiempo Real',\n      },\n    },\n    scales: {\n      y: {\n        title: {\n          display: true,\n          text: 'Fuerza G',\n        },\n        min: 0,\n        max: 4,\n      },\n    },\n    animation: {\n      duration: 300, // Animation duration in milliseconds\n    },\n  };\n\n  return (\n    <Card>\n      <Card.Header>\n        <h5 className=\"mb-0\">Seguimiento de Fuerza G</h5>\n      </Card.Header>\n      <Card.Body>\n        <Line ref={chartRef} options={options} data={chartData} />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default GForceChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}