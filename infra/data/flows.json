[
  {
    "id": "tab1",
    "type": "tab",
    "label": "Chisifai Cheese Cake Monitoring",
    "disabled": false,
    "info": ""
  },
  {
    "id": "mqttcfg1",
    "type": "mqtt-broker",
    "name": "Mosquitto (docker)",
    "broker": "mosquitto",
    "port": "1883",
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "clean": true
  },
  {
    "id": "mqtt_in",
    "type": "mqtt in",
    "z": "tab1",
    "name": "sensors/cheesecake/#",
    "topic": "sensors/cheesecake/#",
    "qos": "0",
    "datatype": "auto-detect",
    "broker": "mqttcfg1",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 160,
    "y": 120,
    "wires": [
      [
        "json1"
      ]
    ]
  },
  {
    "id": "json1",
    "type": "json",
    "z": "tab1",
    "name": "Parse JSON",
    "property": "payload",
    "action": "",
    "pretty": false,
    "x": 360,
    "y": 120,
    "wires": [
      [
        "func_validate"
      ]
    ]
  },
  {
    "id": "func_validate",
    "type": "function",
    "z": "tab1",
    "name": "Validate & detect alerts (Chisifai)",
    "func": "const p = msg.payload || {};\nif(typeof p.temp !== 'number' || typeof p.humidity !== 'number' || typeof p.vibration !== 'number' || !p.part_id || !p.ts){\n    node.warn('invalid payload');\n    return null;\n}\n\n// Initialize context for tracking consecutive anomalies\nconst partId = p.part_id;\nconst contextKey = `anomaly_${partId}`;\nlet anomalyState = context.get(contextKey) || { tempCount: 0, humidityCount: 0, vibrationCount: 0 };\n\n// Define thresholds for Chisifai cheese cake delivery\nconst TEMP_THRESHOLD = 8.0;      // Temperature above 8°C is critical\nconst HUMIDITY_THRESHOLD = 85.0;  // Humidity above 85% affects quality\nconst VIBRATION_THRESHOLD = 3.0;  // Vibration above 3.0G affects presentation\n\nconst ANOMALY_COUNT_THRESHOLD = 3; // Number of consecutive anomalies to trigger alert\n\n// Check for anomalies and update counters\nif (p.temp > TEMP_THRESHOLD) {\n    anomalyState.tempCount++;\n} else {\n    anomalyState.tempCount = 0; // Reset counter if normal\n}\n\nif (p.humidity > HUMIDITY_THRESHOLD) {\n    anomalyState.humidityCount++;\n} else {\n    anomalyState.humidityCount = 0; // Reset counter if normal\n}\n\nif (p.vibration > VIBRATION_THRESHOLD) {\n    anomalyState.vibrationCount++;\n} else {\n    anomalyState.vibrationCount = 0; // Reset counter if normal\n}\n\n// Check if any anomaly has occurred consecutively for the threshold count\nlet alertTriggered = false;\n\n// Create a deep copy of the payload\nmsg.payload = {\n    part_id: String(p.part_id),\n    ts: new Date(p.ts).toISOString(),\n    temp: Number(p.temp),\n    humidity: Number(p.humidity),\n    vibration: Number(p.vibration)\n};\n\nmsg.headers = { 'Content-Type': 'application/json' };\n\n// Add alert information to the message\nmsg.anomalyState = anomalyState;\nmsg.alerts = {\n    temp_high: anomalyState.tempCount >= ANOMALY_COUNT_THRESHOLD,\n    humidity_high: anomalyState.humidityCount >= ANOMALY_COUNT_THRESHOLD,\n    vibration_high: anomalyState.vibrationCount >= ANOMALY_COUNT_THRESHOLD\n};\n\n// Update the context with the new state\ncontext.set(contextKey, anomalyState);\n\n// Send message to all outputs\nreturn [msg, msg, msg, msg];",
    "outputs": 4,
    "noerr": 0,
    "x": 600,
    "y": 120,
    "wires": [
      [
        "http_ingest_api",
        "debug_in"
      ],
      [
        "http_n8n"
      ],
      [
        "alert_handler"
      ],
      [
        "debug_anomaly_state"
      ]
    ]
  },
  {
    "id": "alert_handler",
    "type": "function",
    "z": "tab1",
    "name": "Handle Alerts",
    "func": "const alerts = msg.alerts;\nconst payload = msg.payload;\n\n// Check if any alert condition is triggered\nif (alerts.temp_high || alerts.humidity_high || alerts.vibration_high) {\n    // Prepare alert message for the alerts API\n    const alertData = {\n        part_id: payload.part_id,\n        alert_types: [],\n        values: [],\n        thresholds: [],\n        ts: payload.ts\n    };\n    \n    if (alerts.temp_high) {\n        alertData.alert_types.push('temp_high');\n        alertData.values.push(payload.temp);\n        alertData.thresholds.push(8.0);\n    }\n    \n    if (alerts.humidity_high) {\n        alertData.alert_types.push('humidity_high');\n        alertData.values.push(payload.humidity);\n        alertData.thresholds.push(85.0);\n    }\n    \n    if (alerts.vibration_high) {\n        alertData.alert_types.push('vibration_high');\n        alertData.values.push(payload.vibration);\n        alertData.thresholds.push(3.0);\n    }\n    \n    msg.payload = alertData;\n    msg.headers = { 'Content-Type': 'application/json' };\n    return msg;\n} else {\n    return null; // Don't send if no alerts\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 850,
    "y": 280,
    "wires": [
      [
        "http_create_alert"
      ]
    ]
  },
  {
    "id": "http_ingest_api",
    "type": "http request",
    "z": "tab1",
    "name": "POST → ingest_api (telemetry)",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://ingest_api:8001/ingest/telemetry",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 870,
    "y": 80,
    "wires": [
      [
        "debug_out_api"
      ]
    ]
  },
  {
    "id": "http_n8n",
    "type": "http request",
    "z": "tab1",
    "name": "POST → n8n webhook",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://n8n:5678/webhook/telemetry",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 840,
    "y": 160,
    "wires": [
      [
        "debug_out_n8n"
      ]
    ]
  },
  {
    "id": "http_create_alert",
    "type": "http request",
    "z": "tab1",
    "name": "POST → create_alert",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://ingest_api:8001/ingest/alert",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 1100,
    "y": 280,
    "wires": [
      [
        "debug_alert_out"
      ]
    ]
  },
  {
    "id": "debug_in",
    "type": "debug",
    "z": "tab1",
    "name": "payload→API+n8n",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 850,
    "y": 40,
    "wires": []
  },
  {
    "id": "debug_out_api",
    "type": "debug",
    "z": "tab1",
    "name": "ingest_api response",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 1070,
    "y": 80,
    "wires": []
  },
  {
    "id": "debug_out_n8n",
    "type": "debug",
    "z": "tab1",
    "name": "n8n response",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 1050,
    "y": 160,
    "wires": []
  },
  {
    "id": "debug_alert_out",
    "type": "debug",
    "z": "tab1",
    "name": "alert creation response",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 1320,
    "y": 280,
    "wires": []
  },
  {
    "id": "debug_anomaly_state",
    "type": "debug",
    "z": "tab1",
    "name": "anomaly state",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "anomalyState",
    "targetType": "msg",
    "x": 870,
    "y": 320,
    "wires": []
  }
]