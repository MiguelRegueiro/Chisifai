{"ast":null,"code":"var _jsxFileName = \"/home/regueiro/Chisifai/frontend-chisifai/src/components/TemperatureChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { useData } from '../contexts/DataContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst TemperatureChart = () => {\n  _s();\n  const {\n    telemetryData,\n    loading\n  } = useData();\n  const chartRef = useRef(null);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Temperatura (째C)',\n      data: [],\n      borderColor: 'rgb(255, 99, 132)',\n      backgroundColor: 'rgba(255, 99, 132, 0.5)',\n      tension: 0.1\n    }]\n  });\n\n  // Update chart data when telemetry data changes\n  useEffect(() => {\n    if (telemetryData && telemetryData.length > 0 && !loading) {\n      // Use the timestamp from the first data point to represent the current update time\n      const currentTimestamp = new Date().toLocaleTimeString();\n      // Calculate average temperature if multiple packages exist\n      const avgTemp = telemetryData.length > 0 ? telemetryData.reduce((sum, item) => sum + item.temperature, 0) / telemetryData.length : 0;\n\n      // Update chart data\n      setChartData(prevData => {\n        // Only add new data point if it's different from the last one to prevent duplicates\n        if (prevData.labels.length > 0 && prevData.labels[prevData.labels.length - 1] === currentTimestamp) {\n          return prevData; // Return previous data if timestamp is the same (avoid duplicate points)\n        }\n        const newLabels = [...prevData.labels.slice(-9), currentTimestamp]; // Keep last 10 points\n        const newData = [...prevData.datasets[0].data.slice(-9), avgTemp];\n        return {\n          labels: newLabels,\n          datasets: [{\n            ...prevData.datasets[0],\n            data: newData\n          }]\n        };\n      });\n    }\n  }, [telemetryData, loading]);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Temperatura en Tiempo Real'\n      }\n    },\n    scales: {\n      y: {\n        title: {\n          display: true,\n          text: 'Temperatura (째C)'\n        },\n        min: 0,\n        max: 10\n      }\n    },\n    animation: {\n      duration: 300 // Animation duration in milliseconds\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"mb-0\",\n        children: \"Seguimiento de Temperatura\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        ref: chartRef,\n        options: options,\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureChart, \"szvX9qN8wi33YV3IYEkGs5GQnQc=\", false, function () {\n  return [useData];\n});\n_c = TemperatureChart;\nexport default TemperatureChart;\nvar _c;\n$RefreshReg$(_c, \"TemperatureChart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Card","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","useData","jsxDEV","_jsxDEV","register","TemperatureChart","_s","telemetryData","loading","chartRef","chartData","setChartData","labels","datasets","label","data","borderColor","backgroundColor","tension","length","currentTimestamp","Date","toLocaleTimeString","avgTemp","reduce","sum","item","temperature","prevData","newLabels","slice","newData","options","responsive","plugins","legend","position","title","display","text","scales","y","min","max","animation","duration","children","Header","className","fileName","_jsxFileName","lineNumber","columnNumber","Body","ref","_c","$RefreshReg$"],"sources":["/home/regueiro/Chisifai/frontend-chisifai/src/components/TemperatureChart.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { useData } from '../contexts/DataContext';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst TemperatureChart = () => {\n  const { telemetryData, loading } = useData();\n  const chartRef = useRef(null);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [\n      {\n        label: 'Temperatura (째C)',\n        data: [],\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\n        tension: 0.1,\n      },\n    ],\n  });\n\n  // Update chart data when telemetry data changes\n  useEffect(() => {\n    if (telemetryData && telemetryData.length > 0 && !loading) {\n      // Use the timestamp from the first data point to represent the current update time\n      const currentTimestamp = new Date().toLocaleTimeString();\n      // Calculate average temperature if multiple packages exist\n      const avgTemp = telemetryData.length > 0 \n        ? telemetryData.reduce((sum, item) => sum + item.temperature, 0) / telemetryData.length\n        : 0;\n      \n      // Update chart data\n      setChartData(prevData => {\n        // Only add new data point if it's different from the last one to prevent duplicates\n        if (prevData.labels.length > 0 && prevData.labels[prevData.labels.length - 1] === currentTimestamp) {\n          return prevData; // Return previous data if timestamp is the same (avoid duplicate points)\n        }\n        \n        const newLabels = [...prevData.labels.slice(-9), currentTimestamp]; // Keep last 10 points\n        const newData = [...prevData.datasets[0].data.slice(-9), avgTemp];\n        \n        return {\n          labels: newLabels,\n          datasets: [\n            {\n              ...prevData.datasets[0],\n              data: newData,\n            }\n          ]\n        };\n      });\n    }\n  }, [telemetryData, loading]);\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Temperatura en Tiempo Real',\n      },\n    },\n    scales: {\n      y: {\n        title: {\n          display: true,\n          text: 'Temperatura (째C)',\n        },\n        min: 0,\n        max: 10,\n      },\n    },\n    animation: {\n      duration: 300, // Animation duration in milliseconds\n    },\n  };\n\n  return (\n    <Card>\n      <Card.Header>\n        <h5 className=\"mb-0\">Seguimiento de Temperatura</h5>\n      </Card.Header>\n      <Card.Body>\n        <Line ref={chartRef} options={options} data={chartData} />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default TemperatureChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}