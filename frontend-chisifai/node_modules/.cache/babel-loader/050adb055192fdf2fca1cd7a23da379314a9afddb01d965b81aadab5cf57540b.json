{"ast":null,"code":"var _jsxFileName = \"/home/regueiro/Chisifai/frontend-chisifai/src/components/GForceChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { useData } from '../contexts/DataContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst GForceChart = () => {\n  _s();\n  const {\n    telemetryData,\n    loading\n  } = useData();\n  const chartRef = useRef(null);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Fuerza G',\n      data: [],\n      borderColor: 'rgb(53, 162, 235)',\n      backgroundColor: 'rgba(53, 162, 235, 0.5)',\n      tension: 0.1\n    }]\n  });\n\n  // Update chart data when telemetry data changes\n  useEffect(() => {\n    if (telemetryData && telemetryData.length > 0 && !loading) {\n      const latestReading = telemetryData[0]; // Assuming first item is the most recent\n\n      // Create new data point\n      const newTime = new Date().toLocaleTimeString();\n      const newGForce = latestReading.gForce;\n\n      // Update chart data\n      setChartData(prevData => {\n        // Only add new data point if it's different from the last one to prevent duplicates\n        if (prevData.labels.length > 0 && prevData.labels[prevData.labels.length - 1] === newTime) {\n          return prevData; // Return previous data if timestamp is the same (avoid duplicate points)\n        }\n        const newLabels = [...prevData.labels.slice(-9), newTime]; // Keep last 10 points\n        const newData = [...prevData.datasets[0].data.slice(-9), newGForce];\n        return {\n          labels: newLabels,\n          datasets: [{\n            ...prevData.datasets[0],\n            data: newData\n          }]\n        };\n      });\n    }\n  }, [telemetryData, loading]);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Fuerza G en Tiempo Real'\n      }\n    },\n    scales: {\n      y: {\n        title: {\n          display: true,\n          text: 'Fuerza G'\n        },\n        min: 0,\n        max: 4\n      }\n    },\n    animation: {\n      duration: 300 // Animation duration in milliseconds\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"mb-0\",\n        children: \"Seguimiento de Fuerza G\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        ref: chartRef,\n        options: options,\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(GForceChart, \"yo45ZZG0KHVGgIjoQea6/4YZurc=\", false, function () {\n  return [useData];\n});\n_c = GForceChart;\nexport default GForceChart;\nvar _c;\n$RefreshReg$(_c, \"GForceChart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Card","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","useData","jsxDEV","_jsxDEV","register","GForceChart","_s","telemetryData","loading","chartRef","chartData","setChartData","labels","datasets","label","data","borderColor","backgroundColor","tension","length","latestReading","newTime","Date","toLocaleTimeString","newGForce","gForce","prevData","newLabels","slice","newData","options","responsive","plugins","legend","position","title","display","text","scales","y","min","max","animation","duration","children","Header","className","fileName","_jsxFileName","lineNumber","columnNumber","Body","ref","_c","$RefreshReg$"],"sources":["/home/regueiro/Chisifai/frontend-chisifai/src/components/GForceChart.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { useData } from '../contexts/DataContext';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst GForceChart = () => {\n  const { telemetryData, loading } = useData();\n  const chartRef = useRef(null);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [\n      {\n        label: 'Fuerza G',\n        data: [],\n        borderColor: 'rgb(53, 162, 235)',\n        backgroundColor: 'rgba(53, 162, 235, 0.5)',\n        tension: 0.1,\n      },\n    ],\n  });\n\n  // Update chart data when telemetry data changes\n  useEffect(() => {\n    if (telemetryData && telemetryData.length > 0 && !loading) {\n      const latestReading = telemetryData[0]; // Assuming first item is the most recent\n      \n      // Create new data point\n      const newTime = new Date().toLocaleTimeString();\n      const newGForce = latestReading.gForce;\n      \n      // Update chart data\n      setChartData(prevData => {\n        // Only add new data point if it's different from the last one to prevent duplicates\n        if (prevData.labels.length > 0 && prevData.labels[prevData.labels.length - 1] === newTime) {\n          return prevData; // Return previous data if timestamp is the same (avoid duplicate points)\n        }\n        \n        const newLabels = [...prevData.labels.slice(-9), newTime]; // Keep last 10 points\n        const newData = [...prevData.datasets[0].data.slice(-9), newGForce];\n        \n        return {\n          labels: newLabels,\n          datasets: [\n            {\n              ...prevData.datasets[0],\n              data: newData,\n            }\n          ]\n        };\n      });\n    }\n  }, [telemetryData, loading]);\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Fuerza G en Tiempo Real',\n      },\n    },\n    scales: {\n      y: {\n        title: {\n          display: true,\n          text: 'Fuerza G',\n        },\n        min: 0,\n        max: 4,\n      },\n    },\n    animation: {\n      duration: 300, // Animation duration in milliseconds\n    },\n  };\n\n  return (\n    <Card>\n      <Card.Header>\n        <h5 className=\"mb-0\">Seguimiento de Fuerza G</h5>\n      </Card.Header>\n      <Card.Body>\n        <Line ref={chartRef} options={options} data={chartData} />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default GForceChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}